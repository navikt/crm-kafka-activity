name: Deploy Apps to NAIS

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "src/**"
      - "build.gradle"
      - "Dockerfile"
  push:
    paths:
      - ".nais/**"
      - "!.nais/template/**"
      - "!.nais/README.md"
      - "src/**"
      - "build.gradle"
      - "Dockerfile"

env:
  IMAGE: ghcr.io/${{ github.repository }}/crm-kafka-activity:${{ github.sha }}
  ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
jobs:
  # ----------------------------- #
  # --------- run tests --------- #
  # ----------------------------- #

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build and run tests
        run: ./gradlew clean build --info

  # ----------------------------- #
  # ----------- build ----------- #
  # ----------------------------- #

  build:
    name: Build & push Docker Image
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build JAR
        run: ./gradlew clean build shadowJar -x test
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build . --pull --tag ${IMAGE}
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${IMAGE}

  # ----------------------------- #
  # ------- setup matrix -------- #
  # ----------------------------- #

  setup-matrix:
    name: Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      emptyMatrix: ${{ steps.set-matrix.outputs.emptyMatrix }}
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # set matrix
      - name: Set Matrix
        id: set-matrix
        run: |
          echo Checking which configurations inside .nais/ were changed...

          MATRIX=$(git diff-tree --diff-filter=d --no-commit-id --name-only -r ${{ github.event.before }} ${{ github.sha }} | grep .nais/ | cut -d '/' -f 2 | sort -u | paste -d',' -s )

          if [[  -z "${MATRIX// }" ]]; then
            echo "No changed configuration in .nais/"
            echo "::set-output name=emptyMatrix::true"
            echo "::set-output name=matrix::[]"
          else
            JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
            echo "Apps to re-deploy: $MATRIX"
            echo "::set-output name=matrix::$JSON"
            echo "::set-output name=emptyMatrix::false"
          fi

          echo Checking if Dockerfile, /src or build.gradle was changed as well. Then, all apps will be re-deployed...
          # wouldn't it make sense to use github.{event.before,sha} here too?
          if git diff --name-only HEAD^ HEAD |grep -e '^Dockerfile$' -e '^src/' -e '^build\.gradle$'; then
              echo "The above files were changed, so all apps are re-deployed."

              # cause all apps to re-deploy
              MATRIX=$(for i in $(ls -d .nais/*/); do echo ${i%%/}; done | grep .nais/ | cut -d '/' -f 2 | paste -d',' -s )
              matrix=(.nais/*/)
              matrix=("${matrix[@]%/}")
              matrix=("${matrix[@]#.nais/}")
              echo "Apps to re-deploy: $MATRIX"
              echo "Likely apps to re-deploy: ${matrix[@]}"

              JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
              json=$(jq -c -n '{resource: $ARGS.positional[]}' --args "${matrix[@]}"
              echo "JSON matrix: $JSON"
              echo "Likely json matrix: $json"

              echo "::set-output name=matrix::$JSON"
              echo "::set-output name=emptyMatrix::false"
          fi

          # if manual deployment, add all to matrix
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            echo ----------------------------
            echo Manual deployment, deploy all topics

            # cause all apps to re-deploy
            MATRIX=$(for i in $(ls -d .nais/*/); do echo ${i%%/}; done | grep .nais/ | cut -d '/' -f 2 | paste -d',' -s )
            echo "Apps to re-deploy: $MATRIX"

            JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
            echo "JSON matrix: $JSON"

            echo "::set-output name=matrix::$JSON"
            echo "::set-output name=emptyMatrix::false"
          fi

  # ----------------------------- #
  # -------- deploy dev --------- #
  # ----------------------------- #

  deploy-dev:
    name: Deploy to dev-gcp
    needs: [build, setup-matrix]
    runs-on: ubuntu-latest
    if: needs.setup-matrix.outputs.emptyMatrix == 'false'
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        if: matrix.resource != 'template' && matrix.resource != 'README.md'
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: .nais/${{ matrix.resource }}/dev.yml
          VAR: image=${{ env.IMAGE }}

  # ----------------------------- #
  # -------- deploy prod -------- #
  # ----------------------------- #

  deploy-prod:
    name: Deploy to prod-gcp
    needs: [build, setup-matrix]
    runs-on: ubuntu-latest
    if: needs.setup-matrix.outputs.emptyMatrix == 'false' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        if: matrix.resource != 'template' && matrix.resource != 'README.md'
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: .nais/${{ matrix.resource }}/prod.yml
