name: Deploy Apps to NAIS

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "src/**"
      - "build.gradle"
      - "Dockerfile"
  push:
    paths:
      - ".nais/**"
      - "!.nais/template/**"
      - "!.nais/README.md"
      - "src/**"
      - "build.gradle"
      - "Dockerfile"

jobs:
  # ----------------------------- #
  # --------- run tests --------- #
  # ----------------------------- #
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: temurin
      - name: Build and run tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew test

  # ----------------------------- #
  # ----------- build ----------- #
  # ----------------------------- #

  build:
    name: Build & push Docker Image
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: temurin
      - name: Setup Gradle to generate and submit dependency graphs
        uses: gradle/actions/setup-gradle@v3
        with:
          dependency-graph: generate-and-submit
      - name: Build JAR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew clean build shadowJar -x test
      - name: Build and publish Docker image
        uses: nais/docker-build-push@v0
        id: docker-push
        with:
          team: teamcrm
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

  # ----------------------------- #
  # ------- setup matrix -------- #
  # ----------------------------- #

  setup-matrix:
    name: Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      emptyMatrix: ${{ steps.set-matrix.outputs.emptyMatrix }}
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # set matrix
      - name: Set Matrix
        id: set-matrix
        run: |
          echo Checking which configurations inside .nais/ were changed...

          MATRIX=$(git diff-tree --diff-filter=d --no-commit-id --name-only -r ${{ github.event.before }} ${{ github.sha }} | grep .nais/ | cut -d '/' -f 2 | sort -u | paste -d',' -s )

          if [[  -z "${MATRIX// }" ]]; then
            echo "No changed configuration in .nais/"
            echo "::set-output name=emptyMatrix::true"
            echo "::set-output name=matrix::[]"
          else
            JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
            echo "Apps to re-deploy: $MATRIX"
            echo "::set-output name=matrix::$JSON"
            echo "::set-output name=emptyMatrix::false"
          fi

          echo Checking if Dockerfile, /src or build.gradle was changed as well. Then, all apps will be re-deployed...
          data=$(git diff --name-only HEAD^ HEAD)
          for i in $data; do

              row=$(echo ${i%%/} | cut -d '/' -f 1)
              
              # if changed file is Dockerfile, inside /src or build.gradle
              if [  "$row" = "Dockerfile" ] || [  "$row" = "src" ] || [  "$row" = "build.gradle" ]; then
                  echo $row was changed, so all apps are re-deployed
                  
                  # cause all apps to re-deploy
                  MATRIX=$(for i in $(ls -d .nais/*/); do echo ${i%%/}; done | grep .nais/ | cut -d '/' -f 2 | paste -d',' -s )
                  echo "Apps to re-deploy: $MATRIX"

                  JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
                  echo "JSON matrix: $JSON"

                  echo "::set-output name=matrix::$JSON"
                  echo "::set-output name=emptyMatrix::false"
              fi
          done

          # if manual deployment, add all to matrix
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            echo ----------------------------
            echo Manual deployment, deploy all topics
            
            # cause all apps to re-deploy
            MATRIX=$(for i in $(ls -d .nais/*/); do echo ${i%%/}; done | grep .nais/ | cut -d '/' -f 2 | paste -d',' -s )
            echo "Apps to re-deploy: $MATRIX"

            JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
            echo "JSON matrix: $JSON"

            echo "::set-output name=matrix::$JSON"
            echo "::set-output name=emptyMatrix::false"
          fi

  # ----------------------------- #
  # -------- deploy dev --------- #
  # ----------------------------- #

  deploy-dev:
    name: Deploy to dev-gcp
    needs: [build, setup-matrix]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: needs.setup-matrix.outputs.emptyMatrix == 'false'
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        if: matrix.resource != 'template' && matrix.resource != 'README.md'
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: .nais/${{ matrix.resource }}/dev.yml
          VAR: image=${{ needs.build.outputs.image }}

  # ----------------------------- #
  # -------- deploy prod -------- #
  # ----------------------------- #

  deploy-prod:
    name: Deploy to prod-gcp
    needs: [build, setup-matrix]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: needs.setup-matrix.outputs.emptyMatrix == 'false' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        if: matrix.resource != 'template' && matrix.resource != 'README.md'
        env:
          CLUSTER: prod-gcp
          RESOURCE: .nais/${{ matrix.resource }}/prod.yml
          VAR: image=${{ needs.build.outputs.image }}
