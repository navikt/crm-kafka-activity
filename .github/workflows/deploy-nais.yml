name: Build, push, and deploy

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "src/**"
      - "build.gradle"
      - "Dockerfile"
  push:
    paths:
      - ".nais/**"
      - "src/**"
      - "build.gradle"
      - "Dockerfile"

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/crm-kafka-activity:${{ github.sha }}
  ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
jobs:
  # ----------------------------- #
  # --------- run tests --------- #
  # ----------------------------- #

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: "8.x"
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build and run tests
        run: ./gradlew clean build --info

  # ----------------------------- #
  # ----------- build ----------- #
  # ----------------------------- #

  build:
    name: Build and push Docker container
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: "8.x"
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build JAR
        run: ./gradlew clean build shadowJar -x test
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build . --pull --tag ${IMAGE}
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${IMAGE}

  # ----------------------------- #
  # ------- setup matrix -------- #
  # ----------------------------- #

  setup-matrix:
    name: Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      emptyMatrix: ${{ steps.set-matrix.outputs.emptyMatrix }}
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # set matrix
      - id: set-matrix
        run: |
          MATRIX=$(for i in $(ls -d .nais/*/); do echo ${i%%/}; done | grep .nais/ | cut -d '/' -f 2 | paste -d',' -s )
          echo Matrix is $MATRIX
          if [[  -z "${MATRIX// }" ]]; then
            echo "Empty matrix"
            echo "::set-output name=emptyMatrix::true"
            echo "::set-output name=matrix::[]"
          else
            JSON=$(jq -c -n --arg v $MATRIX '{"resource": $v|split(",")}')
            echo "matrix: $JSON"
            echo "::set-output name=matrix::$JSON"
            echo "::set-output name=emptyMatrix::false"
          fi

  # ----------------------------- #
  # -------- deploy dev --------- #
  # ----------------------------- #

  deploy-dev:
    name: Deploy to dev-gcp
    needs: [build, setup-matrix]
    runs-on: ubuntu-latest
    if: needs.setup-matrix.outputs.emptyMatrix == 'false'
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: .nais/${{ matrix.resource }}/dev.yml

  # ----------------------------- #
  # -------- deploy prod -------- #
  # ----------------------------- #

  # deploy-prod:
  #   name: Deploy to prod-gcp
  #   needs: [build, setup-matrix]
  #   runs-on: ubuntu-latest
  #   if: needs.setup-matrix.outputs.emptyMatrix == 'false'
  #   strategy:
  #     fail-fast: true
  #     matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: nais/deploy/actions/deploy@v1
  #       env:
  #         APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
  #         CLUSTER: prod-gcp
  #         RESOURCE: .nais/${{ matrix.resource }}/prod.yml
